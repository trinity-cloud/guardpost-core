services:
  postgres:
    image: postgres:15-alpine
    container_name: guardpost-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-guardpost}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-guardpostpass}
      - POSTGRES_DB=${POSTGRES_DB:-guardpostdb}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-guardpost} -d $${POSTGRES_DB:-guardpostdb}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  neo4j:
    image: neo4j:5 # Use Neo4j 5 explicitly
    container_name: guardpost-neo4j
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j_import:/import # Optional: For importing data
    environment:
      # Set password, accept license
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-changeme}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Disable initial password change prompt - SETTINGS REMOVED/CHANGED in Neo4j 5
      - NEO4J_initial_dbms_default__database=neo4j # Ensure default db name
      - NEO4J_PLUGINS=["apoc"]
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --quiet http://localhost:7474 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine # Use specific version
    container_name: guardpost-rabbitmq
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management UI
    environment:
      # Default user/pass is guest/guest
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: guardpost-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    # GuardPost Core FastAPI App
    container_name: guardpost-core-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      # Mount the app code for live development changes
      - ./app:/app/app
      # Mount alembic for migrations if run from within container
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    environment:
      # --- App Specific Settings --- #
      - APP_ENV=development # Example environment setting
      - ENABLE_LLM_REMEDIATION=${ENABLE_LLM_REMEDIATION} # Ensure this is passed from .env
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY} # Ensure this is passed from .env
      # --- JWT Settings (Read from .env) --- #
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # --- Database Settings --- # 
      - DATABASE_URL=postgresql://${POSTGRES_USER:-guardpost}:${POSTGRES_PASSWORD:-guardpostpass}@postgres:5432/${POSTGRES_DB:-guardpostdb}
      # --- Neo4j Settings --- #
      - NEO4J_URI=neo4j://neo4j:7687 # Connect via Bolt using service name
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-changeme}
      # --- Celery Settings --- #
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # --- Other Settings --- # 
      # --- AWS Settings (Read from .env) --- #
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} # Uncomment if using temporary credentials
      # Add other required app-specific env vars
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Command to run with auto-reload for development
    # Run alembic upgrade first, then start uvicorn
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  worker:
    # GuardPost Core Celery Worker
    container_name: guardpost-core-worker
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      # Mount the same code volume
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    environment:
      # Needs the same environment variables as the app
      - APP_ENV=development
      # --- JWT Settings (Read from .env) --- #
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # --- Database Settings --- #
      - DATABASE_URL=postgresql://${POSTGRES_USER:-guardpost}:${POSTGRES_PASSWORD:-guardpostpass}@postgres:5432/${POSTGRES_DB:-guardpostdb}
      # --- Neo4j Settings --- #
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-changeme}
      # --- Celery Settings --- #
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # --- AWS Settings (Read from .env - Tasks need credentials) --- #
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} # Uncomment if using temporary credentials
      # Add other worker-specific env vars
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Optionally depend on app if tasks call API, but usually not needed
      # postgres: # If tasks directly use DB
      #   condition: service_healthy 
      # neo4j: # If tasks directly use graph DB
      #   condition: service_healthy
      # Command to run the Celery worker
      # Note: --reload is not standard/reliable for celery, manual restart is safer
    command: celery -A app.core.celery_app worker --loglevel=INFO

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
